<?php
namespace parallel\yii\actions;

/**
 * This is a generic action to Update or Create a new entity. It replaces the default update and create actions
 * generated by Gii.
 * 
 * This action can work together with parallel\yii\behaviors\DetailItems to update detail items in the same action.
 * 
 * @author Anton Menkveld
 *
 */
class EntityUpdateAction extends \parallel\yii\Action {
	/**
	 * Entity model name
	 */
	public $model;
	
	/**
	 * Array of all the child models that should also be updated
	 */
	public $childModels = array();
	
	/**
	 * Where to redirect to on successful update
	 */
	public $onSuccessRedirectTo = "view";
	
	/**
	 * View to render on the update action
	 */
	public $updateView = "update";
	
	/**
	 * View to render on the create action
	 */
	public $createView = "create";
	
	/**
	 * Specified if ajax validation should be done. 
	 */
	public $ajaxValidation = "false";
	
	public function run() {
		// Apply access restrictions if applicable - see \parallel\yii\Action for variable definition
		if(\Yii::app()->user->checkAccess($this->authItem) || !$this->restrictAccess) {
			// Ajax validation
			//if($this->ajaxValidation && \Yii::app()->request->isAjaxRequest) {
			//	$this->controller->performAjaxValidation($this->model);
			//}

			if(isset($_GET['id'])) {
				$model = \parallel\yii\ActiveRecord::model($this->model)->findByPk($_GET['id']);
				// Check if model was found - if not raise exception
				if($model===null) {
					throw new \CHttpException(parent::RESOURCE_NOT_FOUND_STATUS, parent::RESOURCE_NOT_FOUND_MESSAGE);
				}
			} else {
				$model = new $this->model;
			}
			
			// Handle Entity POST data
			if(isset($_POST[$this->model]))
			{
				$model->attributes=$_POST[$this->model];
			}
			
			// Handle Child Models POST data
			if(!empty($this->childModels)) {
				foreach($this->childModels as $childModel => $childModelBehavior) {
					if(isset($_POST[$childModel])) {
						$model->{$childModelBehavior}->attributes = $_POST;
					}
				}
			}
				
			// Save data
			if(!empty($_POST)) {
				if($model->save()) {
//\Yii::app()->end();
					$this->controller->redirect(array($this->onSuccessRedirectTo,'id'=>$model->id));
				}
			}

			// Render the update view
			switch($this->id) {
				case 'update':
					$this->controller->render($this->updateView, array('model'=>$model));
					break;
				case 'create':
					$this->controller->render($this->createView, array('model'=>$model));
					break;
				default:
					throw new \CHttpException(parent::INVALID_REQUEST_STATUS, parent::INVALID_REQUEST_MESSAGE);
			}
		} else {
			throw new \CHttpException(parent::USER_UNAUTHORISED_STATUS, parent::USER_UNAUTHORISED_MESSAGE);
		}		
	}
}

